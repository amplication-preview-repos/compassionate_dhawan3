/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Memorial as PrismaMemorial } from "@prisma/client";

export class MemorialServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MemorialCountArgs, "select">): Promise<number> {
    return this.prisma.memorial.count(args);
  }

  async memorials(
    args: Prisma.MemorialFindManyArgs
  ): Promise<PrismaMemorial[]> {
    return this.prisma.memorial.findMany(args);
  }
  async memorial(
    args: Prisma.MemorialFindUniqueArgs
  ): Promise<PrismaMemorial | null> {
    return this.prisma.memorial.findUnique(args);
  }
  async createMemorial(
    args: Prisma.MemorialCreateArgs
  ): Promise<PrismaMemorial> {
    return this.prisma.memorial.create(args);
  }
  async updateMemorial(
    args: Prisma.MemorialUpdateArgs
  ): Promise<PrismaMemorial> {
    return this.prisma.memorial.update(args);
  }
  async deleteMemorial(
    args: Prisma.MemorialDeleteArgs
  ): Promise<PrismaMemorial> {
    return this.prisma.memorial.delete(args);
  }
}
