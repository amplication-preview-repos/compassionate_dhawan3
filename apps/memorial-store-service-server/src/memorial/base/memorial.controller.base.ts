/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MemorialService } from "../memorial.service";
import { MemorialCreateInput } from "./MemorialCreateInput";
import { Memorial } from "./Memorial";
import { MemorialFindManyArgs } from "./MemorialFindManyArgs";
import { MemorialWhereUniqueInput } from "./MemorialWhereUniqueInput";
import { MemorialUpdateInput } from "./MemorialUpdateInput";

export class MemorialControllerBase {
  constructor(protected readonly service: MemorialService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Memorial })
  async createMemorial(
    @common.Body() data: MemorialCreateInput
  ): Promise<Memorial> {
    return await this.service.createMemorial({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Memorial] })
  @ApiNestedQuery(MemorialFindManyArgs)
  async memorials(@common.Req() request: Request): Promise<Memorial[]> {
    const args = plainToClass(MemorialFindManyArgs, request.query);
    return this.service.memorials({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Memorial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async memorial(
    @common.Param() params: MemorialWhereUniqueInput
  ): Promise<Memorial | null> {
    const result = await this.service.memorial({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Memorial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMemorial(
    @common.Param() params: MemorialWhereUniqueInput,
    @common.Body() data: MemorialUpdateInput
  ): Promise<Memorial | null> {
    try {
      return await this.service.updateMemorial({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Memorial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMemorial(
    @common.Param() params: MemorialWhereUniqueInput
  ): Promise<Memorial | null> {
    try {
      return await this.service.deleteMemorial({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
