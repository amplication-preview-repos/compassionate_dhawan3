/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GranitTypeService } from "../granitType.service";
import { GranitTypeCreateInput } from "./GranitTypeCreateInput";
import { GranitType } from "./GranitType";
import { GranitTypeFindManyArgs } from "./GranitTypeFindManyArgs";
import { GranitTypeWhereUniqueInput } from "./GranitTypeWhereUniqueInput";
import { GranitTypeUpdateInput } from "./GranitTypeUpdateInput";

export class GranitTypeControllerBase {
  constructor(protected readonly service: GranitTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GranitType })
  async createGranitType(
    @common.Body() data: GranitTypeCreateInput
  ): Promise<GranitType> {
    return await this.service.createGranitType({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GranitType] })
  @ApiNestedQuery(GranitTypeFindManyArgs)
  async granitTypes(@common.Req() request: Request): Promise<GranitType[]> {
    const args = plainToClass(GranitTypeFindManyArgs, request.query);
    return this.service.granitTypes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GranitType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async granitType(
    @common.Param() params: GranitTypeWhereUniqueInput
  ): Promise<GranitType | null> {
    const result = await this.service.granitType({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GranitType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGranitType(
    @common.Param() params: GranitTypeWhereUniqueInput,
    @common.Body() data: GranitTypeUpdateInput
  ): Promise<GranitType | null> {
    try {
      return await this.service.updateGranitType({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GranitType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGranitType(
    @common.Param() params: GranitTypeWhereUniqueInput
  ): Promise<GranitType | null> {
    try {
      return await this.service.deleteGranitType({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
