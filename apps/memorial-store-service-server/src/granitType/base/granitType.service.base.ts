/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GranitType as PrismaGranitType } from "@prisma/client";

export class GranitTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GranitTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.granitType.count(args);
  }

  async granitTypes(
    args: Prisma.GranitTypeFindManyArgs
  ): Promise<PrismaGranitType[]> {
    return this.prisma.granitType.findMany(args);
  }
  async granitType(
    args: Prisma.GranitTypeFindUniqueArgs
  ): Promise<PrismaGranitType | null> {
    return this.prisma.granitType.findUnique(args);
  }
  async createGranitType(
    args: Prisma.GranitTypeCreateArgs
  ): Promise<PrismaGranitType> {
    return this.prisma.granitType.create(args);
  }
  async updateGranitType(
    args: Prisma.GranitTypeUpdateArgs
  ): Promise<PrismaGranitType> {
    return this.prisma.granitType.update(args);
  }
  async deleteGranitType(
    args: Prisma.GranitTypeDeleteArgs
  ): Promise<PrismaGranitType> {
    return this.prisma.granitType.delete(args);
  }
}
