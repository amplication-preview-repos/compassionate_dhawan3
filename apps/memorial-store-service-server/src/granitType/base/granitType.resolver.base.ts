/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GranitType } from "./GranitType";
import { GranitTypeCountArgs } from "./GranitTypeCountArgs";
import { GranitTypeFindManyArgs } from "./GranitTypeFindManyArgs";
import { GranitTypeFindUniqueArgs } from "./GranitTypeFindUniqueArgs";
import { DeleteGranitTypeArgs } from "./DeleteGranitTypeArgs";
import { GranitTypeService } from "../granitType.service";
@graphql.Resolver(() => GranitType)
export class GranitTypeResolverBase {
  constructor(protected readonly service: GranitTypeService) {}

  async _granitTypesMeta(
    @graphql.Args() args: GranitTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GranitType])
  async granitTypes(
    @graphql.Args() args: GranitTypeFindManyArgs
  ): Promise<GranitType[]> {
    return this.service.granitTypes(args);
  }

  @graphql.Query(() => GranitType, { nullable: true })
  async granitType(
    @graphql.Args() args: GranitTypeFindUniqueArgs
  ): Promise<GranitType | null> {
    const result = await this.service.granitType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GranitType)
  async deleteGranitType(
    @graphql.Args() args: DeleteGranitTypeArgs
  ): Promise<GranitType | null> {
    try {
      return await this.service.deleteGranitType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
